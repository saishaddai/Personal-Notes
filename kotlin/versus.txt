Dependency Injection vs Inversion of Control
Dependency Injection is a design pattern that implements the Inversion of Control principle. 
It's a technique where an object receives its dependencies from an external source, rather than creating them itself
Scope: IoC is a broader concept that encompasses various techniques, including DI. DI is a specific technique that implements IoC.
Focus: IoC focuses on decoupling components from their dependencies, while DI focuses on providing dependencies to components.
Mechanism: IoC can be achieved through various mechanisms, including DI, Service Locator, and Factory patterns. DI is a specific mechanism that implements IoC.

DAO vs Repository
Differences
Scope: DAOs are typically used for low-level data access operations, while Repositories are used for higher-level data abstraction and retrieval.
Abstraction level: DAOs provide a lower-level abstraction, while Repositories provide a higher-level abstraction.
Technology dependence: DAOs are often tied to a specific data storage technology, while Repositories are designed to be technology-agnostic.

Similarities:
Decoupling: Decoupling the business logic from the data storage makes it easier to change or replace the data storage technology.
Abstraction: Providing a layer of abstraction makes it easier to change or replace the data storage technology without affecting the business logic.
Reusability: DAOs and Repositories can be reused across different applications and domains.


Future vs Promises
Future is a read-only container that holds a value, whereas Promise is a writeable container that can be used to produce a value.
Future is used to retrieve the result of an asynchronous operation, whereas Promise is used to create a Future that can be completed by calling complete or completeExceptionally methods.
